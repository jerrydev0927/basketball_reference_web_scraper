{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Home \u00b6 This project is in no way affiliated with basketball-reference.com (and I hope the fine folks at Basketball Reference do not get too upset at me for creating and maintaining this project). Please use this project responsibly as Basketball Reference is a very useful resource. Background \u00b6 This library was created for another Python project where I was trying to estimate an NBA player's productivity (for, uh, daily fantasy sports \"science\"). A lot of sports-related APIs are expensive - luckily, Basketball Reference provides a free service which can be scraped and translated into a usable API. Installation \u00b6 This project is published to PyPi . It can be installed via pip . pip install basketball_reference_web_scraper Note This library requires Python 3.4+ Note Currently, only data from seasons after the 1999-2000 season is supported Note There are currently two supported major versions - 3+ and 4+ . Contributors \u00b6 This is an open-source project that welcomes all pull requests and issues - I would love to hear your thoughts and ideas around making this project even better. Thanks to @DaiJunyan , @ecallahan5 , @Yotamho , and @ntsirakis for their contributions!","title":"Home"},{"location":"#home","text":"This project is in no way affiliated with basketball-reference.com (and I hope the fine folks at Basketball Reference do not get too upset at me for creating and maintaining this project). Please use this project responsibly as Basketball Reference is a very useful resource.","title":"Home"},{"location":"#background","text":"This library was created for another Python project where I was trying to estimate an NBA player's productivity (for, uh, daily fantasy sports \"science\"). A lot of sports-related APIs are expensive - luckily, Basketball Reference provides a free service which can be scraped and translated into a usable API.","title":"Background"},{"location":"#installation","text":"This project is published to PyPi . It can be installed via pip . pip install basketball_reference_web_scraper Note This library requires Python 3.4+ Note Currently, only data from seasons after the 1999-2000 season is supported Note There are currently two supported major versions - 3+ and 4+ .","title":"Installation"},{"location":"#contributors","text":"This is an open-source project that welcomes all pull requests and issues - I would love to hear your thoughts and ideas around making this project even better. Thanks to @DaiJunyan , @ecallahan5 , @Yotamho , and @ntsirakis for their contributions!","title":"Contributors"},{"location":"api/","text":"API \u00b6 Client \u00b6 The import ed client contains the API methods that will access Basketball Reference from basketball_reference_web_scraper import client Enums \u00b6 Various enum values are returned as part of the result set for API methods or as inputs for various API methods. They are import ed from the data path. League from basketball_reference_web_scraper.data import Location Note Represents the league designated by Basketball Reference . The values are League.NATIONAL_BASKETBALL_ASSOCIATION , League.AMERICAN_BASKETBALL_ASSOCIATION , and League.BASKETBALL_ASSOCIATION_OF_AMERICA . Location from basketball_reference_web_scraper.data import Location Note Represents whether a game was played at home or away. The two possible values are Location.HOME and Location.AWAY Outcome from basketball_reference_web_scraper.data import Outcome Note Represents if a game ended in a win or a loss. The two possible values are Outcome.WIN and Outcome.LOSS OutputType from basketball_reference_web_scraper.data import OutputType Note Represents the type of data output. The two possible values are OutputType.JSON and OutputType.CSV OutputWriteOption from basketball_reference_web_scraper.data import OutputWriteOption Note Represents Python file modes when outputting data. The four possible values are OutputWriteOption.WRITE , OutputWriteOption.CREATE_AND_WRITE , OutputWriteOption.APPEND , and OutputWriteOption.APPEND_AND_WRITE Position from basketball_reference_web_scraper.data import Position Note Represents one of the seven positon designations ( Position.POINT_GUARD , Position.SHOOTING_GUARD , Position.SMALL_FORWARD , Position.POWER_FORWARD , Position.CENTER , Position.FORWARD , Position.GUARD ) in Basketball Reference PeriodType from basketball_reference_web_scraper.data import PeriodType Note Represents if a period was a quarter ( PeriodType.QUARTER ) or an overtime period ( PeriodType.OVERTIME ) Team from basketball_reference_web_scraper.data import Team Note Represents a team in the NBA (for example, Team.BOSTON_CELTICS ). Output \u00b6 The default data returned by API methods are Python objects (e.g. a list of dictionaries ). All API methods come with output_type , output_file_path , output_write_option , and json_options arguments that are optional , and by default, are None . These arguments can be used to specify JSON / CSV output that may be written to a file. Use the OutputType enum as the output_type value to specify CSV or JSON output. The output_file_path argument takes a string and specifies where the result output should be written. Warning Currently, specifying an output_type of OutputType.CSV requires an output_file_path value. JSON output can be returned by API methods without having to be written to a file. Use the OutputWriteOption enum as the output_write_option value to specify if the result output should be written, or appended to the specified file path (or any of other the Python file mode options). Note The default OutputWriteOption if it is not specified (but an output_file_path value is specified) is OutputWriteOption.WRITE . Methods \u00b6 Player Box Scores For A Given Day \u00b6 repl.it Examples Python Data Structures from basketball_reference_web_scraper import client client . player_box_scores ( day = 1 , month = 1 , year = 2017 ) JSON from basketball_reference_web_scraper import client from basketball_reference_web_scraper.data import OutputType client . player_box_scores ( day = 1 , month = 1 , year = 2017 , output_type = OutputType . JSON ) JSON to file from basketball_reference_web_scraper import client from basketball_reference_web_scraper.data import OutputType client . player_box_scores ( day = 1 , month = 1 , year = 2017 , output_type = OutputType . JSON , output_file_path = \"./1_1_2017_box_scores.json\" ) CSV to file from basketball_reference_web_scraper import client from basketball_reference_web_scraper.data import OutputType client . player_box_scores ( day = 1 , month = 1 , year = 2017 , output_type = OutputType . CSV , output_file_path = \"./1_1_2017_box_scores.csv\" ) Team Box Scores For A Given Day \u00b6 repl.it Examples Python Data Structures from basketball_reference_web_scraper import client client . team_box_scores ( day = 1 , month = 1 , year = 2018 ) JSON from basketball_reference_web_scraper import client from basketball_reference_web_scraper.data import OutputType client . team_box_scores ( day = 1 , month = 1 , year = 2017 , output_type = OutputType . JSON ) JSON to file from basketball_reference_web_scraper import client from basketball_reference_web_scraper.data import OutputType client . team_box_scores ( day = 1 , month = 1 , year = 2017 , output_type = OutputType . JSON , output_file_path = \"./1_1_2017_box_scores.json\" ) CSV to file from basketball_reference_web_scraper import client from basketball_reference_web_scraper.data import OutputType client . team_box_scores ( day = 1 , month = 1 , year = 2017 , output_type = OutputType . CSV , output_file_path = \"./1_1_2017_box_scores.csv\" ) Get Season Schedule \u00b6 repl.it Examples Python Data Structures from basketball_reference_web_scraper import client client . season_schedule ( season_end_year = 2018 ) JSON from basketball_reference_web_scraper import client from basketball_reference_web_scraper.data import OutputType client . season_schedule ( season_end_year = 2018 , output_type = OutputType . JSON ) JSON to file from basketball_reference_web_scraper import client from basketball_reference_web_scraper.data import OutputType client . season_schedule ( season_end_year = 2018 , output_type = OutputType . JSON , output_file_path = \"./2017_2018_season.json\" ) CSV to file from basketball_reference_web_scraper import client from basketball_reference_web_scraper.data import OutputType client . season_schedule ( season_end_year = 2018 , output_type = OutputType . CSV , output_file_path = \"./2017_2018_season.csv\" ) Player Season Totals (Basic Statistics) \u00b6 repl.it Examples Python Data Structures from basketball_reference_web_scraper import client client . players_season_totals ( season_end_year = 2018 ) JSON from basketball_reference_web_scraper import client from basketball_reference_web_scraper.data import OutputType client . players_season_totals ( season_end_year = 2018 , output_type = OutputType . JSON ) JSON to file from basketball_reference_web_scraper import client from basketball_reference_web_scraper.data import OutputType client . players_season_totals ( season_end_year = 2018 , output_type = OutputType . JSON , output_file_path = \"./2017_2018_player_season_totals.json\" ) CSV to file from basketball_reference_web_scraper import client from basketball_reference_web_scraper.data import OutputType client . players_season_totals ( season_end_year = 2018 , output_type = OutputType . CSV , output_file_path = \"./2017_2018_player_season_totals.csv\" ) Player Season Totals (Advanced Statistics) \u00b6 repl.it Examples Python Data Structures from basketball_reference_web_scraper import client client . players_advanced_season_totals ( season_end_year = 2018 ) JSON from basketball_reference_web_scraper import client from basketball_reference_web_scraper.data import OutputType client . players_advanced_season_totals ( season_end_year = 2018 , output_type = OutputType . JSON ) JSON to file from basketball_reference_web_scraper import client from basketball_reference_web_scraper.data import OutputType client . players_advanced_season_totals ( season_end_year = 2018 , output_type = OutputType . JSON , output_file_path = \"./2017_2018_advanced_player_season_totals.json\" ) CSV to file from basketball_reference_web_scraper import client from basketball_reference_web_scraper.data import OutputType client . players_advanced_season_totals ( season_end_year = 2018 , output_type = OutputType . CSV , output_file_path = \"./2017_2018_advanced_player_season_totals.csv\" ) Play-By-Play \u00b6 repl.it Examples Note The structure of the API is due to the unique URL pattern that Basketball Reference has for getting play-by-play data which depends on the date of the game and the home team. Python Data Structures from basketball_reference_web_scraper import client from basketball_reference_web_scraper.data import Team client . play_by_play ( home_team = Team . BOSTON_CELTICS , year = 2018 , month = 10 , day = 16 ) JSON from basketball_reference_web_scraper import client from basketball_reference_web_scraper.data import OutputType , Team client . play_by_play ( home_team = Team . BOSTON_CELTICS , year = 2018 , month = 10 , day = 16 , output_type = OutputType . JSON ) JSON to file from basketball_reference_web_scraper import client from basketball_reference_web_scraper.data import OutputType , Team client . play_by_play ( home_team = Team . BOSTON_CELTICS , year = 2018 , month = 10 , day = 16 , output_type = OutputType . JSON , output_file_path = \"./2018_10_06_BOS_PBP.json\" ) CSV to file from basketball_reference_web_scraper import client from basketball_reference_web_scraper.data import OutputType , Team client . play_by_play ( home_team = Team . BOSTON_CELTICS , year = 2018 , month = 10 , day = 16 , output_type = OutputType . CSV , output_file_path = \"./2018_10_06_BOS_PBP.csv\" ) Regular Season Player Box Scores \u00b6 Note The player_identifier is Basketball Reference's unique identifier for each player. In the case of Russell Westbrook, their player_identifier is westbru01 . You can see this from their player page URL: https://www.basketball-reference.com/players/w/westbru01/gamelog/2020 . repl.it Examples Python Data Structures from basketball_reference_web_scraper import client client . regular_season_player_box_scores ( player_identifier = \"westbru01\" , season_end_year = 2018 ) JSON from basketball_reference_web_scraper import client from basketball_reference_web_scraper.data import OutputType client . regular_season_player_box_scores ( player_identifier = \"westbru01\" , season_end_year = 2018 , output_type = OutputType . JSON ) JSON to file from basketball_reference_web_scraper import client from basketball_reference_web_scraper.data import OutputType client . regular_season_player_box_scores ( player_identifier = \"westbru01\" , season_end_year = 2018 , output_type = OutputType . JSON , output_file_path = \"./2017_2018_russell_westbrook_regular_season_box_scores.json\" ) CSV to file from basketball_reference_web_scraper import client from basketball_reference_web_scraper.data import OutputType client . regular_season_player_box_scores ( player_identifier = \"westbru01\" , season_end_year = 2018 , output_type = OutputType . CSV , output_file_path = \"./2017_2018_russell_westbrook_regular_season_box_scores.csv\" ) Playoff Player Box Scores \u00b6 Note The player_identifier is Basketball Reference's unique identifier for each player. In the case of Russell Westbrook, their player_identifier is westbru01 . You can see this from their player page URL: https://www.basketball-reference.com/players/w/westbru01/gamelog/2020 . repl.it Examples Python Data Structures from basketball_reference_web_scraper import client client . playoff_player_box_scores ( player_identifier = \"westbru01\" , season_end_year = 2018 ) JSON from basketball_reference_web_scraper import client from basketball_reference_web_scraper.data import OutputType client . playoff_player_box_scores ( player_identifier = \"westbru01\" , season_end_year = 2018 , output_type = OutputType . JSON ) JSON to file from basketball_reference_web_scraper import client from basketball_reference_web_scraper.data import OutputType client . playoff_player_box_scores ( player_identifier = \"westbru01\" , season_end_year = 2018 , output_type = OutputType . JSON , output_file_path = \"./2017_2018_russell_westbrook_playoff_box_scores.json\" ) CSV to file from basketball_reference_web_scraper import client from basketball_reference_web_scraper.data import OutputType client . playoff_player_box_scores ( player_identifier = \"westbru01\" , season_end_year = 2018 , output_type = OutputType . CSV , output_file_path = \"./2017_2018_russell_westbrook_playoff_box_scores.csv\" ) Search \u00b6 repl.it Examples Python Data Structures from basketball_reference_web_scraper import client client . search ( term = \"Ko\" ) JSON from basketball_reference_web_scraper import client from basketball_reference_web_scraper.data import OutputType client . search ( term = \"Ko\" , output_type = OutputType . JSON ) JSON to file from basketball_reference_web_scraper import client from basketball_reference_web_scraper.data import OutputType client . search ( term = \"Ko\" , output_type = OutputType . JSON , output_file_path = \"./1_1_2017_box_scores.json\" ) CSV to file from basketball_reference_web_scraper import client from basketball_reference_web_scraper.data import OutputType client . search ( term = \"Ko\" , output_type = OutputType . CSV , output_file_path = \"./1_1_2017_box_scores.csv\" ) Standings \u00b6 repl.it Examples Python Data Structures from basketball_reference_web_scraper import client client . standings ( season_end_year = 2019 ) JSON from basketball_reference_web_scraper import client from basketball_reference_web_scraper.data import OutputType client . standings ( season_end_year = 2019 , output_type = OutputType . JSON ) JSON to file from basketball_reference_web_scraper import client from basketball_reference_web_scraper.data import OutputType client . standings ( season_end_year = 2019 , output_type = OutputType . JSON , output_file_path = \"./2019_standings.json\" ) CSV to file from basketball_reference_web_scraper import client from basketball_reference_web_scraper.data import OutputType client . standings ( season_end_year = 2019 , output_type = OutputType . JSON , output_file_path = \"./2019_standings.csv\" )","title":"API"},{"location":"api/#api","text":"","title":"API"},{"location":"api/#client","text":"The import ed client contains the API methods that will access Basketball Reference from basketball_reference_web_scraper import client","title":"Client"},{"location":"api/#enums","text":"Various enum values are returned as part of the result set for API methods or as inputs for various API methods. They are import ed from the data path. League from basketball_reference_web_scraper.data import Location Note Represents the league designated by Basketball Reference . The values are League.NATIONAL_BASKETBALL_ASSOCIATION , League.AMERICAN_BASKETBALL_ASSOCIATION , and League.BASKETBALL_ASSOCIATION_OF_AMERICA . Location from basketball_reference_web_scraper.data import Location Note Represents whether a game was played at home or away. The two possible values are Location.HOME and Location.AWAY Outcome from basketball_reference_web_scraper.data import Outcome Note Represents if a game ended in a win or a loss. The two possible values are Outcome.WIN and Outcome.LOSS OutputType from basketball_reference_web_scraper.data import OutputType Note Represents the type of data output. The two possible values are OutputType.JSON and OutputType.CSV OutputWriteOption from basketball_reference_web_scraper.data import OutputWriteOption Note Represents Python file modes when outputting data. The four possible values are OutputWriteOption.WRITE , OutputWriteOption.CREATE_AND_WRITE , OutputWriteOption.APPEND , and OutputWriteOption.APPEND_AND_WRITE Position from basketball_reference_web_scraper.data import Position Note Represents one of the seven positon designations ( Position.POINT_GUARD , Position.SHOOTING_GUARD , Position.SMALL_FORWARD , Position.POWER_FORWARD , Position.CENTER , Position.FORWARD , Position.GUARD ) in Basketball Reference PeriodType from basketball_reference_web_scraper.data import PeriodType Note Represents if a period was a quarter ( PeriodType.QUARTER ) or an overtime period ( PeriodType.OVERTIME ) Team from basketball_reference_web_scraper.data import Team Note Represents a team in the NBA (for example, Team.BOSTON_CELTICS ).","title":"Enums"},{"location":"api/#output","text":"The default data returned by API methods are Python objects (e.g. a list of dictionaries ). All API methods come with output_type , output_file_path , output_write_option , and json_options arguments that are optional , and by default, are None . These arguments can be used to specify JSON / CSV output that may be written to a file. Use the OutputType enum as the output_type value to specify CSV or JSON output. The output_file_path argument takes a string and specifies where the result output should be written. Warning Currently, specifying an output_type of OutputType.CSV requires an output_file_path value. JSON output can be returned by API methods without having to be written to a file. Use the OutputWriteOption enum as the output_write_option value to specify if the result output should be written, or appended to the specified file path (or any of other the Python file mode options). Note The default OutputWriteOption if it is not specified (but an output_file_path value is specified) is OutputWriteOption.WRITE .","title":"Output"},{"location":"api/#methods","text":"","title":"Methods"},{"location":"api/#player-box-scores-for-a-given-day","text":"repl.it Examples Python Data Structures from basketball_reference_web_scraper import client client . player_box_scores ( day = 1 , month = 1 , year = 2017 ) JSON from basketball_reference_web_scraper import client from basketball_reference_web_scraper.data import OutputType client . player_box_scores ( day = 1 , month = 1 , year = 2017 , output_type = OutputType . JSON ) JSON to file from basketball_reference_web_scraper import client from basketball_reference_web_scraper.data import OutputType client . player_box_scores ( day = 1 , month = 1 , year = 2017 , output_type = OutputType . JSON , output_file_path = \"./1_1_2017_box_scores.json\" ) CSV to file from basketball_reference_web_scraper import client from basketball_reference_web_scraper.data import OutputType client . player_box_scores ( day = 1 , month = 1 , year = 2017 , output_type = OutputType . CSV , output_file_path = \"./1_1_2017_box_scores.csv\" )","title":"Player Box Scores For A Given Day"},{"location":"api/#team-box-scores-for-a-given-day","text":"repl.it Examples Python Data Structures from basketball_reference_web_scraper import client client . team_box_scores ( day = 1 , month = 1 , year = 2018 ) JSON from basketball_reference_web_scraper import client from basketball_reference_web_scraper.data import OutputType client . team_box_scores ( day = 1 , month = 1 , year = 2017 , output_type = OutputType . JSON ) JSON to file from basketball_reference_web_scraper import client from basketball_reference_web_scraper.data import OutputType client . team_box_scores ( day = 1 , month = 1 , year = 2017 , output_type = OutputType . JSON , output_file_path = \"./1_1_2017_box_scores.json\" ) CSV to file from basketball_reference_web_scraper import client from basketball_reference_web_scraper.data import OutputType client . team_box_scores ( day = 1 , month = 1 , year = 2017 , output_type = OutputType . CSV , output_file_path = \"./1_1_2017_box_scores.csv\" )","title":"Team Box Scores For A Given Day"},{"location":"api/#get-season-schedule","text":"repl.it Examples Python Data Structures from basketball_reference_web_scraper import client client . season_schedule ( season_end_year = 2018 ) JSON from basketball_reference_web_scraper import client from basketball_reference_web_scraper.data import OutputType client . season_schedule ( season_end_year = 2018 , output_type = OutputType . JSON ) JSON to file from basketball_reference_web_scraper import client from basketball_reference_web_scraper.data import OutputType client . season_schedule ( season_end_year = 2018 , output_type = OutputType . JSON , output_file_path = \"./2017_2018_season.json\" ) CSV to file from basketball_reference_web_scraper import client from basketball_reference_web_scraper.data import OutputType client . season_schedule ( season_end_year = 2018 , output_type = OutputType . CSV , output_file_path = \"./2017_2018_season.csv\" )","title":"Get Season Schedule"},{"location":"api/#player-season-totals-basic-statistics","text":"repl.it Examples Python Data Structures from basketball_reference_web_scraper import client client . players_season_totals ( season_end_year = 2018 ) JSON from basketball_reference_web_scraper import client from basketball_reference_web_scraper.data import OutputType client . players_season_totals ( season_end_year = 2018 , output_type = OutputType . JSON ) JSON to file from basketball_reference_web_scraper import client from basketball_reference_web_scraper.data import OutputType client . players_season_totals ( season_end_year = 2018 , output_type = OutputType . JSON , output_file_path = \"./2017_2018_player_season_totals.json\" ) CSV to file from basketball_reference_web_scraper import client from basketball_reference_web_scraper.data import OutputType client . players_season_totals ( season_end_year = 2018 , output_type = OutputType . CSV , output_file_path = \"./2017_2018_player_season_totals.csv\" )","title":"Player Season Totals (Basic Statistics)"},{"location":"api/#player-season-totals-advanced-statistics","text":"repl.it Examples Python Data Structures from basketball_reference_web_scraper import client client . players_advanced_season_totals ( season_end_year = 2018 ) JSON from basketball_reference_web_scraper import client from basketball_reference_web_scraper.data import OutputType client . players_advanced_season_totals ( season_end_year = 2018 , output_type = OutputType . JSON ) JSON to file from basketball_reference_web_scraper import client from basketball_reference_web_scraper.data import OutputType client . players_advanced_season_totals ( season_end_year = 2018 , output_type = OutputType . JSON , output_file_path = \"./2017_2018_advanced_player_season_totals.json\" ) CSV to file from basketball_reference_web_scraper import client from basketball_reference_web_scraper.data import OutputType client . players_advanced_season_totals ( season_end_year = 2018 , output_type = OutputType . CSV , output_file_path = \"./2017_2018_advanced_player_season_totals.csv\" )","title":"Player Season Totals (Advanced Statistics)"},{"location":"api/#play-by-play","text":"repl.it Examples Note The structure of the API is due to the unique URL pattern that Basketball Reference has for getting play-by-play data which depends on the date of the game and the home team. Python Data Structures from basketball_reference_web_scraper import client from basketball_reference_web_scraper.data import Team client . play_by_play ( home_team = Team . BOSTON_CELTICS , year = 2018 , month = 10 , day = 16 ) JSON from basketball_reference_web_scraper import client from basketball_reference_web_scraper.data import OutputType , Team client . play_by_play ( home_team = Team . BOSTON_CELTICS , year = 2018 , month = 10 , day = 16 , output_type = OutputType . JSON ) JSON to file from basketball_reference_web_scraper import client from basketball_reference_web_scraper.data import OutputType , Team client . play_by_play ( home_team = Team . BOSTON_CELTICS , year = 2018 , month = 10 , day = 16 , output_type = OutputType . JSON , output_file_path = \"./2018_10_06_BOS_PBP.json\" ) CSV to file from basketball_reference_web_scraper import client from basketball_reference_web_scraper.data import OutputType , Team client . play_by_play ( home_team = Team . BOSTON_CELTICS , year = 2018 , month = 10 , day = 16 , output_type = OutputType . CSV , output_file_path = \"./2018_10_06_BOS_PBP.csv\" )","title":"Play-By-Play"},{"location":"api/#regular-season-player-box-scores","text":"Note The player_identifier is Basketball Reference's unique identifier for each player. In the case of Russell Westbrook, their player_identifier is westbru01 . You can see this from their player page URL: https://www.basketball-reference.com/players/w/westbru01/gamelog/2020 . repl.it Examples Python Data Structures from basketball_reference_web_scraper import client client . regular_season_player_box_scores ( player_identifier = \"westbru01\" , season_end_year = 2018 ) JSON from basketball_reference_web_scraper import client from basketball_reference_web_scraper.data import OutputType client . regular_season_player_box_scores ( player_identifier = \"westbru01\" , season_end_year = 2018 , output_type = OutputType . JSON ) JSON to file from basketball_reference_web_scraper import client from basketball_reference_web_scraper.data import OutputType client . regular_season_player_box_scores ( player_identifier = \"westbru01\" , season_end_year = 2018 , output_type = OutputType . JSON , output_file_path = \"./2017_2018_russell_westbrook_regular_season_box_scores.json\" ) CSV to file from basketball_reference_web_scraper import client from basketball_reference_web_scraper.data import OutputType client . regular_season_player_box_scores ( player_identifier = \"westbru01\" , season_end_year = 2018 , output_type = OutputType . CSV , output_file_path = \"./2017_2018_russell_westbrook_regular_season_box_scores.csv\" )","title":"Regular Season Player Box Scores"},{"location":"api/#playoff-player-box-scores","text":"Note The player_identifier is Basketball Reference's unique identifier for each player. In the case of Russell Westbrook, their player_identifier is westbru01 . You can see this from their player page URL: https://www.basketball-reference.com/players/w/westbru01/gamelog/2020 . repl.it Examples Python Data Structures from basketball_reference_web_scraper import client client . playoff_player_box_scores ( player_identifier = \"westbru01\" , season_end_year = 2018 ) JSON from basketball_reference_web_scraper import client from basketball_reference_web_scraper.data import OutputType client . playoff_player_box_scores ( player_identifier = \"westbru01\" , season_end_year = 2018 , output_type = OutputType . JSON ) JSON to file from basketball_reference_web_scraper import client from basketball_reference_web_scraper.data import OutputType client . playoff_player_box_scores ( player_identifier = \"westbru01\" , season_end_year = 2018 , output_type = OutputType . JSON , output_file_path = \"./2017_2018_russell_westbrook_playoff_box_scores.json\" ) CSV to file from basketball_reference_web_scraper import client from basketball_reference_web_scraper.data import OutputType client . playoff_player_box_scores ( player_identifier = \"westbru01\" , season_end_year = 2018 , output_type = OutputType . CSV , output_file_path = \"./2017_2018_russell_westbrook_playoff_box_scores.csv\" )","title":"Playoff Player Box Scores"},{"location":"api/#search","text":"repl.it Examples Python Data Structures from basketball_reference_web_scraper import client client . search ( term = \"Ko\" ) JSON from basketball_reference_web_scraper import client from basketball_reference_web_scraper.data import OutputType client . search ( term = \"Ko\" , output_type = OutputType . JSON ) JSON to file from basketball_reference_web_scraper import client from basketball_reference_web_scraper.data import OutputType client . search ( term = \"Ko\" , output_type = OutputType . JSON , output_file_path = \"./1_1_2017_box_scores.json\" ) CSV to file from basketball_reference_web_scraper import client from basketball_reference_web_scraper.data import OutputType client . search ( term = \"Ko\" , output_type = OutputType . CSV , output_file_path = \"./1_1_2017_box_scores.csv\" )","title":"Search"},{"location":"api/#standings","text":"repl.it Examples Python Data Structures from basketball_reference_web_scraper import client client . standings ( season_end_year = 2019 ) JSON from basketball_reference_web_scraper import client from basketball_reference_web_scraper.data import OutputType client . standings ( season_end_year = 2019 , output_type = OutputType . JSON ) JSON to file from basketball_reference_web_scraper import client from basketball_reference_web_scraper.data import OutputType client . standings ( season_end_year = 2019 , output_type = OutputType . JSON , output_file_path = \"./2019_standings.json\" ) CSV to file from basketball_reference_web_scraper import client from basketball_reference_web_scraper.data import OutputType client . standings ( season_end_year = 2019 , output_type = OutputType . JSON , output_file_path = \"./2019_standings.csv\" )","title":"Standings"},{"location":"development/","text":"Development \u00b6 Branches \u00b6 There are two branches, v3 and v4 , which map to the 3+ and 4+ versions, respectively. These are the defacto branches to branch from when developing features. The v3 branch (as well as the 3+ version) will be deprecated in the near-future. master will reflect the latest major version branch. Local \u00b6 Install dependencies using poetry - for installation directions, see the documentation . Once poetry has been installed, dependencies can be installed using the install command like poetry install Note The pyproject.toml file is used to describe the project's requirements and relevant metadata including both the project's dependencies and it's development dependencies (like for generating code coverage, and this documentation site) Testing \u00b6 Unit tests are organized in the unit directory under the tests directory while integration tests are organized under the integration directory. In the cases where tests are extensive (like integration tests for an API method), each of these tests are grouped in a separate file, even if they are implemented in the same file. This is why API methods have their own integration test file under the client directory even though they are all implemented in the client.py file. Warning Sometimes the suite of integration tests run into rate-limiting errors - I'm currently thinking of ways to mitigate this behavior. Currently, this project uses Codecov for code coverage statistics. Continuous Integration \u00b6 GitHub Actions is used for continuous integration to run tests on a variety of operating systems.","title":"Development"},{"location":"development/#development","text":"","title":"Development"},{"location":"development/#branches","text":"There are two branches, v3 and v4 , which map to the 3+ and 4+ versions, respectively. These are the defacto branches to branch from when developing features. The v3 branch (as well as the 3+ version) will be deprecated in the near-future. master will reflect the latest major version branch.","title":"Branches"},{"location":"development/#local","text":"Install dependencies using poetry - for installation directions, see the documentation . Once poetry has been installed, dependencies can be installed using the install command like poetry install Note The pyproject.toml file is used to describe the project's requirements and relevant metadata including both the project's dependencies and it's development dependencies (like for generating code coverage, and this documentation site)","title":"Local"},{"location":"development/#testing","text":"Unit tests are organized in the unit directory under the tests directory while integration tests are organized under the integration directory. In the cases where tests are extensive (like integration tests for an API method), each of these tests are grouped in a separate file, even if they are implemented in the same file. This is why API methods have their own integration test file under the client directory even though they are all implemented in the client.py file. Warning Sometimes the suite of integration tests run into rate-limiting errors - I'm currently thinking of ways to mitigate this behavior. Currently, this project uses Codecov for code coverage statistics.","title":"Testing"},{"location":"development/#continuous-integration","text":"GitHub Actions is used for continuous integration to run tests on a variety of operating systems.","title":"Continuous Integration"}]}